import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../game_state.dart';
import '../models/education_models.dart';
import 'lesson_detail_screen.dart';

class EducationScreen extends StatefulWidget {
  @override
  _EducationScreenState createState() => _EducationScreenState();
}

class _EducationScreenState extends State<EducationScreen> {
  final List<EducationItem> educationItems = [
    EducationItem(
      title: 'Аналитика данных',
      description: 'Основы работы с данными и аналитики',
      icon: Icons.analytics,
      color: Colors.purple,
      lessons: [
        Lesson(
          title: '1. Введение в аналитику данных',
          content: '''
Аналитика данных — это процесс исследования, очистки, преобразования и моделирования данных для обнаружения полезной информации, которая помогает принимать обоснованные решения. Этот процесс широко используется в бизнесе, науке, маркетинге и других областях.

### Основные этапы аналитики данных:
1. **Сбор данных**: Собираются данные из различных источников — базы данных, API, файлы CSV, веб-страницы и т.д. Например, интернет-магазин может собирать данные о покупках клиентов.
2. **Обработка данных**: Данные очищаются от ошибок, пропусков и дубликатов. Например, если в таблице есть пропущенные значения, их можно заполнить средним значением или удалить строку.
3. **Анализ данных**: Применяются статистические методы, машинное обучение или простые вычисления для выявления закономерностей. Например, анализ корреляции может показать, как скидки влияют на продажи.
4. **Визуализация данных**: Результаты представляются в виде графиков, диаграмм или дашбордов для наглядности. Например, линейный график может показать рост продаж за год.

### Зачем нужна аналитика данных?
- Принятие решений: Аналитика помогает понять, какие продукты популярны, а какие нет.
- Прогнозирование: Например, прогнозирование спроса на товары перед праздниками.
- Оптимизация: Оптимизация процессов, таких как логистика или маркетинговые кампании.

### Пример:
Представьте, что вы управляете интернет-магазином. Аналитика данных может помочь выяснить, в какие дни недели продажи выше, какие товары чаще покупают вместе, и какие рекламные кампании приносят больше клиентов.
''',
          quiz: [
            QuizQuestion(
              question: 'Что такое аналитика данных?',
              options: [
                'Процесс исследования данных',
                'Создание баз данных',
                'Программирование на Python'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какой этап НЕ входит в аналитику?',
              options: ['Сбор данных', 'Анализ', 'Ремонт компьютеров'],
              correctAnswerIndex: 2,
            ),
            QuizQuestion(
              question: 'Для чего нужна визуализация данных?',
              options: [
                'Для наглядного представления',
                'Для хранения данных',
                'Для удаления информации'
              ],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '2. Основные метрики и KPI',
          content: '''
Ключевые показатели эффективности (KPI, Key Performance Indicators) — это количественно измеримые значения, которые помогают оценить успешность выполнения целей. Метрики и KPI используются для отслеживания прогресса в бизнесе, маркетинге, разработке и других сферах.

### Что такое KPI?
KPI — это конкретные показатели, которые отражают, насколько эффективно достигаются поставленные цели. Например, для интернет-магазина KPI может быть "количество продаж в месяц", а для команды разработки — "время выполнения задачи".

### Примеры KPI:
1. **Конверсия**: Доля пользователей, совершивших целевое действие (например, покупку). Формула: (Количество покупок / Количество посетителей) * 100%. Если у вас 1000 посетителей и 50 покупок, конверсия = 5%.
2. **Средний чек**: Средняя сумма, которую тратит клиент за одну покупку. Формула: Общая выручка / Количество покупок. Если вы заработали 10 000 рублей за 50 покупок, средний чек = 200 рублей.
3. **Retention Rate (Уровень удержания)**: Процент пользователей, которые возвращаются к продукту через определённое время. Например, если из 100 пользователей через месяц вернулись 30, retention rate = 30%.

### Как выбрать KPI?
- **Целевые**: KPI должны быть связаны с целями бизнеса. Например, если цель — увеличить продажи, KPI может быть "рост выручки на 10%".
- **Измеримые**: Должны быть конкретными и поддающимися измерению. Например, "увеличение удовлетворённости клиентов" — плохой KPI, а "увеличение NPS на 5 пунктов" — хороший.
- **Реалистичные**: Убедитесь, что цели достижимы. Например, рост продаж на 500% за месяц может быть нереалистичным.

### Пример:
Допустим, вы хотите увеличить продажи в интернет-магазине. Вы устанавливаете KPI: "Увеличить конверсию с 5% до 7% за 3 месяца". Для этого вы анализируете данные, улучшаете сайт и запускаете рекламу, а затем отслеживаете прогресс.
''',
          quiz: [
            QuizQuestion(
              question: 'Что такое KPI?',
              options: [
                'Ключевые показатели эффективности',
                'Компьютерный интерфейс',
                'Код программы'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Пример KPI для интернет-магазина?',
              options: ['Конверсия', 'Размер сервера', 'Количество сотрудников'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что измеряет retention rate?',
              options: [
                'Удержание пользователей',
                'Скорость загрузки',
                'Количество продаж'
              ],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '3. Инструменты аналитика',
          content: '''
Аналитики используют различные инструменты для работы с данными. Каждый инструмент подходит для определённых задач — от базового анализа до сложной визуализации.

### Популярные инструменты:
1. **Excel/Google Sheets**:
   - Для чего: Базовый анализ, создание таблиц, простые расчёты.
   - Пример: Построение гистограммы для анализа продаж по месяцам.
   - Плюсы: Простота, доступность.
   - Минусы: Не подходит для больших объёмов данных.
   
2. **SQL**:
   - Для чего: Работа с базами данных, выборка и фильтрация данных.
   - Пример: Запрос `SELECT * FROM sales WHERE date > '2023-01-01';` для выборки продаж за 2023 год.
   - Плюсы: Быстрая обработка больших данных.
   - Минусы: Требует знания синтаксиса.

3. **Python/R**:
   - Для чего: Продвинутый анализ, машинное обучение, статистические расчёты.
   - Пример: Использование библиотеки `pandas` в Python для анализа данных о клиентах.
   - Плюсы: Гибкость, мощные библиотеки (например, `numpy`, `scikit-learn`).
   - Минусы: Нужны навыки программирования.

4. **Tableau/Power BI**:
   - Для чего: Визуализация данных, создание интерактивных дашбордов.
   - Пример: Построение дашборда с графиками продаж, фильтрами по регионам и товарам.
   - Плюсы: Интерактивность, красивый дизайн.
   - Минусы: Часто платные, сложность настройки.

### Как выбрать инструмент?
- Для небольших задач: Excel или Google Sheets.
- Для работы с большими данными: SQL.
- Для сложного анализа: Python или R.
- Для презентации данных: Tableau или Power BI.

### Пример:
Представьте, что вы аналитик в компании. Вам нужно проанализировать продажи за год. Вы используете SQL, чтобы извлечь данные из базы (`SELECT product, SUM(price) FROM sales GROUP BY product;`), затем строите график в Power BI, чтобы показать результаты руководству.
''',
          quiz: [
            QuizQuestion(
              question: 'Для чего используют SQL?',
              options: [
                'Для работы с базами данных',
                'Для создания презентаций',
                'Для программирования игр'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какой инструмент для визуализации?',
              options: ['Tableau', 'Excel', 'Python'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что НЕ является инструментом аналитика?',
              options: ['Photoshop', 'Power BI', 'Google Sheets'],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '4. Визуализация данных',
          content: '''
Визуализация данных — это представление данных в графическом виде, чтобы сделать их более понятными и наглядными. Графики и диаграммы помогают выявлять закономерности, тренды и аномалии.

### Основные виды графиков:
1. **Гистограммы**:
   - Для чего: Сравнение категорий.
   - Пример: Сравнение продаж по разным товарам (телефоны, ноутбуки, планшеты).
   - Особенности: Высота столбца показывает значение.
   
2. **Линейные графики**:
   - Для чего: Изменение данных во времени.
   - Пример: Рост продаж с января по декабрь.
   - Особенности: Линия соединяет точки данных.

3. **Круговые диаграммы**:
   - Для чего: Показ долей в общем объёме.
   - Пример: Доля продаж по категориям (40% — электроника, 30% — одежда, 30% — книги).
   - Особенности: Хорошо для 3-5 категорий, иначе становится нечитаемой.

4. **Точечные графики**:
   - Для чего: Показ корреляции между двумя переменными.
   - Пример: Зависимость продаж от суммы скидки.
   - Особенности: Каждая точка — пара значений.

### Правила хорошего графика:
- **Простота**: Не перегружайте график лишними элементами. Например, уберите лишние линии сетки.
- **Наглядность**: Используйте понятные подписи и цвета. Например, красный для убытков, зелёный для прибыли.
- **Точность**: Убедитесь, что данные на графике соответствуют реальным значениям. Не искажайте масштаб.

### Пример:
Допустим, вы анализируете продажи магазина. Вы строите линейный график, чтобы показать рост продаж за год, и круговую диаграмму, чтобы показать, какие категории товаров приносят больше выручки. Затем добавляете подписи и легенду, чтобы график был понятен даже без пояснений.
''',
          quiz: [
            QuizQuestion(
              question: 'Какой график для изменения во времени?',
              options: ['Линейный', 'Круговой', 'Точечный'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что показывает точечный график?',
              options: ['Корреляцию', 'Доли целого', 'Абсолютные значения'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что важно в хорошем графике?',
              options: ['Наглядность', 'Сложность', 'Яркие цвета'],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '5. Основы SQL для аналитики',
          content: '''
SQL (Structured Query Language) — это язык для работы с реляционными базами данных. Он позволяет аналитикам извлекать, фильтровать и анализировать данные.

### Основные команды SQL:
1. **SELECT**:
   - Для чего: Выборка данных.
   - Пример: `SELECT name, age FROM users;` — выбрать имена и возраст из таблицы users.
   - С добавлением: `SELECT * FROM users;` — выбрать все столбцы.

2. **WHERE**:
   - Для чего: Фильтрация данных.
   - Пример: `SELECT name FROM users WHERE age > 18;` — выбрать имена пользователей старше 18 лет.
   - Операторы: `>`, `<`, `=`, `!=`, `LIKE` (для поиска по шаблону).

3. **GROUP BY**:
   - Для чего: Группировка данных.
   - Пример: `SELECT department, COUNT(*) FROM employees GROUP BY department;` — посчитать количество сотрудников в каждом отделе.
   - Часто используется с агрегатными функциями: `COUNT`, `SUM`, `AVG`, `MAX`, `MIN`.

4. **JOIN**:
   - Для чего: Соединение таблиц.
   - Пример: `SELECT users.name, orders.order_id FROM users JOIN orders ON users.id = orders.user_id;` — соединить таблицы users и orders по полю id.
   - Виды: `INNER JOIN` (только совпадающие записи), `LEFT JOIN` (все записи из левой таблицы).

### Пример:
Представьте базу данных интернет-магазина. У вас есть таблицы `customers` (покупатели) и `orders` (заказы). Вы хотите узнать, сколько заказов сделал каждый покупатель:
```sql
SELECT customers.name, COUNT(orders.order_id) as order_count
FROM customers
LEFT JOIN orders ON customers.id = orders.customer_id
GROUP BY customers.name;
```
Этот запрос покажет имя каждого покупателя и количество его заказов.

### Полезные советы:
- Используйте `LIMIT`, чтобы ограничить количество строк: `SELECT * FROM users LIMIT 10;`.
- Для сортировки используйте `ORDER BY`: `SELECT name FROM users ORDER BY name ASC;`.
- Проверяйте запросы на небольших данных, чтобы избежать ошибок.
''',
          quiz: [
            QuizQuestion(
              question: 'Для чего нужен SQL?',
              options: [
                'Для работы с базами данных',
                'Для создания графиков',
                'Для написания скриптов'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какая команда выбирает данные?',
              options: ['SELECT', 'DELETE', 'UPDATE'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что делает команда WHERE?',
              options: ['Фильтрует данные', 'Группирует', 'Соединяет таблицы'],
              correctAnswerIndex: 0,
            ),
          ],
        ),
      ],
    ),
    EducationItem(
      title: 'Основы программирования',
      description: 'Изучите базовые концепции программирования',
      icon: Icons.code,
      color: Colors.blue,
      lessons: [
        Lesson(
          title: '1. Введение в программирование',
          content: '''
Программирование — это процесс создания компьютерных программ, которые решают определённые задачи. Программы пишутся на языках программирования, таких как Python, Java, C++, Dart и других, которые компьютер может понять и выполнить.

### Что такое программа?
Программа — это набор инструкций, которые компьютер выполняет шаг за шагом. Например, калькулятор — это программа, которая выполняет арифметические операции (сложение, вычитание и т.д.) на основе ввода пользователя.

### Основные понятия программирования:
1. **Переменные**:
   - Переменные используются для хранения данных. Например, `age = 25` означает, что переменная `age` содержит значение 25.
   - Переменные можно изменять: `age = age + 1` увеличит значение на 1.
   
2. **Условия**:
   - Условия позволяют программе принимать решения. Например:
     ```dart
     if (age >= 18) {
       print("Вы взрослый");
     } else {
       print("Вы ребёнок");
     }
     ```
     Здесь программа проверяет, больше ли `age` или равно 18, и выполняет соответствующий блок кода.

3. **Циклы**:
   - Циклы позволяют повторять действия. Например:
     ```dart
     for (int i = 1; i <= 5; i++) {
       print("Повторение номер \$i");
     }
     ```
     Этот код выведет числа от 1 до 5.

4. **Функции**:
   - Функции — это блоки кода, которые можно вызывать многократно. Например:
     ```dart
     int sum(int a, int b) {
       return a + b;
     }
     ```
     Функция `sum` принимает два числа и возвращает их сумму.

### Зачем учить программирование?
- **Автоматизация задач**: Программирование позволяет автоматизировать рутинные задачи, такие как обработка данных.
- **Решение проблем**: Вы можете создавать программы для решения сложных задач, например, расчёта маршрутов.
- **Карьера**: Программисты востребованы в IT-сфере, и навыки программирования открывают множество возможностей.

### Пример:
Представьте, что вы хотите написать программу, которая здоровается с пользователем:
```dart
void main() {
  String name = "Алексей";
  print("Привет, \$name!");
}
```
Эта программа сохраняет имя "Алексей" в переменной и выводит приветствие.
''',
          quiz: [
            QuizQuestion(
              question: 'Что такое программирование?',
              options: [
                'Процесс создания компьютерных программ',
                'Ремонт компьютеров',
                'Написание документов'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что НЕ является основным понятием программирования?',
              options: ['Переменные', 'Функции', 'Монитор'],
              correctAnswerIndex: 2,
            ),
            QuizQuestion(
              question: 'На чем пишут программы?',
              options: [
                'На языках программирования',
                'На естественных языках',
                'На языке жестов'
              ],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '2. Переменные и типы данных',
          content: '''
Переменные — это основа программирования. Они позволяют хранить данные и использовать их в программе. Переменная — это как коробка, в которую можно положить значение, а затем использовать это значение, когда оно понадобится.

### Что такое переменная?
Переменная — это именованная область памяти, где хранятся данные. Например:
```dart
int age = 25;
String name = "Анна";
```
Здесь `age` — переменная, содержащая число 25, а `name` — переменная, содержащая строку "Анна".

### Основные типы данных:
1. **Целые числа (int)**:
   - Используются для хранения целых чисел, например, 5, 0, -10.
   - Пример: `int score = 100;`

2. **Дробные числа (double)**:
   - Для чисел с дробной частью, например, 3.14, 0.001.
   - Пример: `double pi = 3.14;`

3. **Строки (String)**:
   - Для хранения текста, например, "Привет, мир!".
   - Пример: `String greeting = "Привет!";`

4. **Логические значения (bool)**:
   - Для хранения значений `true` (истина) или `false` (ложь).
   - Пример: `bool isActive = true;`

### Работа с переменными:
- **Объявление**: Указываем тип и имя переменной: `int count;`.
- **Присваивание**: Задаём значение: `count = 10;`.
- **Изменение**: Можем менять значение: `count = count + 1;`.

### Пример:
```dart
void main() {
  String name = "Мария";
  int age = 20;
  double height = 1.65;
  bool isStudent = true;

  print("Имя: \$name");
  print("Возраст: \$age");
  print("Рост: \$height м");
  print("Студент: \$isStudent");
}
```
Этот код объявляет переменные разных типов и выводит их значения.

### Полезные советы:
- Давайте переменным понятные имена: `userAge` лучше, чем просто `a`.
- Используйте правильный тип данных: не храните числа в строках.
- В языках с динамической типизацией (например, Python) тип можно не указывать: `x = 10` автоматически сделает `x` целым числом.
''',
          quiz: [
            QuizQuestion(
              question: 'Что такое переменная?',
              options: [
                'Именованная область памяти',
                'Постоянное значение',
                'Устройство ввода'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какой тип данных для целых чисел?',
              options: ['int', 'double', 'String'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какой тип данных НЕ является базовым?',
              options: ['int', 'double', 'array'],
              correctAnswerIndex: 2,
            ),
          ],
        ),
        Lesson(
          title: '3. Условные операторы',
          content: '''
Условные операторы позволяют программе принимать решения на основе условий. Они используются, когда нужно выполнить разные действия в зависимости от ситуации.

### Основные условные операторы:
1. **if**:
   - Проверяет условие и выполняет код, если оно истинно.
   - Пример:
     ```dart
     int age = 20;
     if (age >= 18) {
       print("Вы взрослый");
     }
     ```

2. **else**:
   - Выполняет код, если условие в `if` ложно.
   - Пример:
     ```dart
     if (age >= 18) {
       print("Вы взрослый");
     } else {
       print("Вы ребёнок");
     }
     ```

3. **else if**:
   - Позволяет проверять дополнительные условия.
   - Пример:
     ```dart
     if (age < 13) {
       print("Вы ребёнок");
     } else if (age < 18) {
       print("Вы подросток");
     } else {
       print("Вы взрослый");
     }
     ```

### Условия и операторы сравнения:
- `>` (больше), `<` (меньше), `>=` (больше или равно), `<=` (меньше или равно), `==` (равно), `!=` (не равно).
- Логические операторы:
  - `&&` (и): `if (age >= 18 && age <= 65)` — возраст от 18 до 65.
  - `||` (или): `if (age < 18 || age > 65)` — возраст меньше 18 или больше 65.
  - `!` (не): `if (!isStudent)` — если не студент.

### Пример:
```dart
void main() {
  int temperature = 25;
  if (temperature > 30) {
    print("Очень жарко!");
  } else if (temperature > 20) {
    print("Тепло");
  } else if (temperature > 0) {
    print("Прохладно");
  } else {
    print("Холодно");
  }
}
```
Этот код проверяет температуру и выводит соответствующее сообщение.

### Полезные советы:
- Старайтесь не вкладывать слишком много условий друг в друга — это усложняет код.
- Используйте понятные условия: `if (isActive == true)` можно сократить до `if (isActive)`.
- Проверяйте краевые случаи: например, что будет, если `age` равно 18?
''',
          quiz: [
            QuizQuestion(
              question: 'Какой оператор проверяет условие?',
              options: ['if', 'for', 'print'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Сколько условий можно проверить в одном if?',
              options: ['Одно', 'Несколько', 'Любое количество'],
              correctAnswerIndex: 2,
            ),
            QuizQuestion(
              question: 'Для чего нужен else?',
              options: [
                'Для альтернативного варианта',
                'Для создания цикла',
                'Для вывода текста'
              ],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '4. Циклы',
          content: '''
Циклы — это конструкции в программировании, которые позволяют повторять действия многократно. Они полезны, когда нужно выполнить одну и ту же операцию несколько раз.

### Основные виды циклов:
1. **for**:
   - Используется, когда известно количество повторений.
   - Синтаксис:
     ```dart
     for (int i = 1; i <= 5; i++) {
       print("Повторение номер \$i");
     }
     ```
   - Здесь `i` — счётчик, который увеличивается на 1 после каждой итерации. Цикл выполнится 5 раз.

2. **while**:
   - Выполняется, пока условие истинно.
   - Пример:
     ```dart
     int i = 1;
     while (i <= 5) {
       print("Повторение номер \$i");
       i++;
     }
     ```
   - Этот цикл делает то же, что и `for`, но условие проверяется в начале каждой итерации.

3. **do-while**:
   - Похож на `while`, но выполняется хотя бы один раз, даже если условие ложно.
   - Пример:
     ```dart
     int i = 1;
     do {
       print("Повторение номер \$i");
       i++;
     } while (i <= 5);
     ```

### Когда использовать циклы?
- Для перебора данных: например, вывести все элементы списка.
- Для выполнения действий до достижения условия: например, считывать ввод пользователя, пока он не введёт "выход".
- Для автоматизации: например, повторить расчёт 100 раз.

### Пример:
Представьте, что нужно посчитать сумму чисел от 1 до 10:
```dart
void main() {
  int sum = 0;
  for (int i = 1; i <= 10; i++) {
    sum += i;
  }
  print("Сумма: \$sum"); // Вывод: Сумма: 55
}
```

### Полезные советы:
- **Избегайте бесконечных циклов**: Убедитесь, что условие выхода достижимо. Например, в `while (true)` без `break` программа зависнет.
- **Используйте break и continue**:
  - `break` — прерывает цикл: `if (i == 3) break;` остановит цикл, когда `i` равно 3.
  - `continue` — пропускает текущую итерацию: `if (i == 3) continue;` пропустит итерацию для `i == 3`.
- **Оптимизируйте**: Не делайте лишних вычислений внутри цикла.
''',
          quiz: [
            QuizQuestion(
              question: 'Какой цикл используют при известном количестве повторений?',
              options: ['for', 'while', 'do-while'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какой цикл выполнится хотя бы один раз?',
              options: ['do-while', 'for', 'while'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что такое бесконечный цикл?',
              options: [
                'Цикл, который никогда не закончится',
                'Цикл с одним повторением',
                'Цикл без условий'
              ],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '5. Функции',
          content: '''
Функции — это блоки кода, которые выполняют определённую задачу и могут быть вызваны многократно. Они помогают организовать код, сделать его читаемым и избежать дублирования.

### Что такое функция?
Функция — это именованный блок кода, который может принимать параметры, выполнять действия и возвращать результат. Например:
```dart
int sum(int a, int b) {
  return a + b;
}
```
- `int` — тип возвращаемого значения.
- `sum` — имя функции.
- `int a, int b` — параметры.
- `return a + b` — возвращает сумму `a` и `b`.

### Как использовать функцию?
После определения функции её можно вызвать:
```dart
void main() {
  int result = sum(3, 5);
  print("Сумма: \$result"); // Вывод: Сумма: 8
}
```

### Виды функций:
1. **Без параметров**:
   ```dart
   void sayHello() {
     print("Привет!");
   }
   ```
   Вызов: `sayHello();`

2. **С параметрами**:
   ```dart
   void greet(String name) {
     print("Привет, \$name!");
   }
   ```
   Вызов: `greet("Анна");`

3. **С возвращаемым значением**:
   ```dart
   double average(int a, int b) {
     return (a + b) / 2;
   }
   ```
   Вызов: `double avg = average(10, 20); // avg = 15.0`

### Зачем нужны функции?
- **Повторное использование**: Один раз написали — используйте многократно.
- **Читаемость**: Код становится понятнее, если разбить его на функции с понятными именами.
- **Модульность**: Легче тестировать и изменять отдельные части программы.

### Пример:
Напишем программу, которая считает площадь прямоугольника:
```dart
double rectangleArea(double width, double height) {
  return width * height;
}

void main() {
  double area = rectangleArea(5.0, 3.0);
  print("Площадь: \$area"); // Вывод: Площадь: 15.0
}
```

### Полезные советы:
- Давайте функциям понятные имена: `calculateArea` лучше, чем `ca`.
- Не делайте функции слишком длинными — лучше разбить на несколько.
- Используйте параметры по умолчанию, если нужно:
  ```dart
  void greet(String name, {String greeting = "Привет"}) {
    print("\$greeting, \$name!");
  }
  ```
  Вызов: `greet("Анна");` или `greet("Анна", greeting: "Здравствуй");`.
''',
          quiz: [
            QuizQuestion(
              question: 'Что такое функция?',
              options: [
                'Блок кода, выполняющий задачу',
                'Тип данных',
                'Условный оператор'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что возвращает функция sum(2, 3)?',
              options: ['5', '6', '23'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Зачем нужны функции?',
              options: [
                'Для организации кода',
                'Для создания переменных',
                'Для вывода текста'
              ],
              correctAnswerIndex: 0,
            ),
          ],
        ),
      ],
    ),
    EducationItem(
      title: 'Алгоритмы',
      description: 'Узнайте о популярных алгоритмах',
      icon: Icons.account_tree,
      color: Colors.green,
      lessons: [
        Lesson(
          title: '1. Что такое алгоритм?',
          content: '''
Алгоритм — это чёткая последовательность шагов для решения определённой задачи. Алгоритмы лежат в основе программирования и используются для выполнения задач, от простых расчётов до сложных вычислений, таких как машинное обучение.

### Что такое алгоритм?
Алгоритм можно сравнить с рецептом приготовления блюда: он описывает, что нужно сделать и в каком порядке, чтобы достичь результата. Например, алгоритм сложения двух чисел:
1. Взять первое число.
2. Взять второе число.
3. Сложить их.
4. Вернуть результат.

### Свойства алгоритма:
1. **Дискретность**: Алгоритм состоит из отдельных шагов.
2. **Определённость**: Каждый шаг должен быть понятным и однозначным.
3. **Результативность**: Алгоритм должен завершаться и давать результат.
4. **Массовость**: Алгоритм должен работать для всех данных, подходящих под задачу.

### Примеры алгоритмов:
- **Поиск максимального числа**:
  ```dart
  int findMax(List<int> numbers) {
    int max = numbers[0];
    for (int i = 1; i < numbers.length; i++) {
      if (numbers[i] > max) {
        max = numbers[i];
      }
    }
    return max;
  }
  ```
  Этот алгоритм перебирает числа в списке и находит наибольшее.

- **Сортировка**: Алгоритмы сортировки, такие как пузырьковая сортировка или быстрая сортировка, упорядочивают данные.

### Зачем нужны алгоритмы?
- **Эффективность**: Хороший алгоритм решает задачу быстрее и требует меньше ресурсов.
- **Повторяемость**: Алгоритм можно использовать многократно для разных данных.
- **Универсальность**: Алгоритмы применяются в разных областях — от игр до анализа данных.

### Пример:
Представьте, что вам нужно найти книгу в библиотеке. Алгоритм может быть таким:
1. Определить жанр книги.
2. Найти полку с этим жанром.
3. Перебирать книги, пока не найдёте нужную.
4. Если книга не найдена, проверить другую полку.
''',
          quiz: [
            QuizQuestion(
              question: 'Алгоритм - это...',
              options: [
                'Последовательность шагов',
                'Язык программирования',
                'Компьютерная программа'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какое свойство НЕ относится к алгоритму?',
              options: ['Дискретность', 'Случайность', 'Определенность'],
              correctAnswerIndex: 1,
            ),
            QuizQuestion(
              question: 'Может ли алгоритм быть бесконечным?',
              options: ['Нет', 'Да', 'Только в математике'],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '2. Линейные алгоритмы',
          content: '''
Линейные алгоритмы — это простейший вид алгоритмов, где шаги выполняются строго последовательно, без ветвлений или циклов. Каждый шаг выполняется один раз, и алгоритм движется от начала к концу.

### Что такое линейный алгоритм?
Линейный алгоритм — это алгоритм, где все действия выполняются в фиксированном порядке. Например, рецепт приготовления чая:
1. Налить воду в чайник.
2. Включить чайник.
3. Дождаться кипения.
4. Налить кипяток в чашку.
5. Положить чайный пакетик.
6. Добавить сахар по вкусу.

### Особенности линейных алгоритмов:
- **Простота**: Нет условий или повторений.
- **Предсказуемость**: Все шаги выполняются в одном и том же порядке.
- **Ограниченность**: Подходит только для простых задач.

### Пример:
Напишем программу для линейного алгоритма, который считает сумму покупок:
```dart
void main() {
  double item1 = 100.0;
  double item2 = 50.0;
  double item3 = 30.0;
  
  double total = item1 + item2 + item3;
  print("Итого: \$total рублей");
}
```
Этот код просто складывает цены трёх товаров и выводит результат.

### Когда использовать?
Линейные алгоритмы подходят для задач, где нет необходимости в принятии решений или повторении действий. Например:
- Подсчёт суммы.
- Вывод фиксированного текста.
- Простые преобразования данных (например, перевод температуры из Цельсия в Фаренгейт).

### Ограничения:
- Не подходят для сложных задач, где нужно учитывать условия (например, "если товар в наличии") или повторять действия (например, "для каждого клиента").
- Невозможно адаптировать к изменяющимся данным без изменения кода.
''',
          quiz: [
            QuizQuestion(
              question: 'Как выполняются шаги в линейном алгоритме?',
              options: ['Последовательно', 'В случайном порядке', 'Параллельно'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Пример линейного алгоритма?',
              options: ['Рецепт блюда', 'Игра в шахматы', 'Поиск пути'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Может ли линейный алгоритм иметь ветвления?',
              options: ['Нет', 'Да', 'Только в конце'],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '3. Алгоритмы с ветвлениями',
          content: '''
Алгоритмы с ветвлениями позволяют программе принимать решения на основе условий. Они используются, когда нужно выбрать один из нескольких путей выполнения.

### Что такое ветвление?
Ветвление — это конструкция, которая позволяет алгоритму выполнять разные действия в зависимости от условия. Например, если сегодня дождь, взять зонт, иначе — надеть солнцезащитные очки.

### Как реализуется ветвление?
В программировании для ветвлений используются условные операторы `if`, `else if`, `else`. Пример:
```dart
void main() {
  int temperature = 15;
  if (temperature > 20) {
    print("Надень футболку");
  } else if (temperature > 10) {
    print("Надень кофту");
  } else {
    print("Надень куртку");
  }
}
```

### Типы ветвлений:
1. **Простое ветвление**:
   - Только `if`:
     ```dart
     if (score > 50) {
       print("Вы прошли!");
     }
     ```
   - Если условие ложно, ничего не происходит.

2. **Полное ветвление**:
   - `if-else`:
     ```dart
     if (score > 50) {
       print("Вы прошли!");
     } else {
       print("Попробуйте снова");
     }
     ```

3. **Множественное ветвление**:
   - `if-else if-else`:
     ```dart
     if (grade == "A") {
       print("Отлично!");
     } else if (grade == "B") {
       print("Хорошо");
     } else {
       print("Нужно улучшить");
     }
     ```

### Пример:
Представьте, что вы пишете алгоритм для выдачи скидки:
```dart
double calculateDiscount(double purchaseAmount) {
  if (purchaseAmount >= 1000) {
    return purchaseAmount * 0.1; // 10% скидка
  } else if (purchaseAmount >= 500) {
    return purchaseAmount * 0.05; // 5% скидка
  } else {
    return 0; // Нет скидки
  }
}
```
Этот алгоритм проверяет сумму покупки и возвращает соответствующую скидку.

### Полезные советы:
- Не делайте слишком много вложенных условий — код становится сложным.
- Используйте `switch`, если проверяете одну переменную на разные значения:
  ```dart
  switch (day) {
    case "Понедельник":
      print("Начало недели");
      break;
    case "Пятница":
      print("Конец недели");
      break;
    default:
      print("Обычный день");
  }
  ```
- Проверяйте все возможные случаи, чтобы избежать ошибок.
''',
          quiz: [
            QuizQuestion(
              question: 'Что определяет ветвление алгоритма?',
              options: ['Условия', 'Циклы', 'Функции'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какой оператор используют для ветвлений?',
              options: ['if-else', 'for', 'print'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Может ли алгоритм иметь несколько ветвлений?',
              options: ['Да', 'Нет', 'Только одно'],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '4. Циклические алгоритмы',
          content: '''
Циклические алгоритмы позволяют повторять действия многократно, пока выполняется определённое условие. Они используются для обработки данных, автоматизации задач и перебора элементов.

### Что такое циклический алгоритм?
Циклический алгоритм — это алгоритм, который повторяет шаги, пока не будет достигнуто условие выхода. Например, "пока есть непрочитанные письма — читать следующее письмо".

### Типы циклических алгоритмов:
1. **Цикл с предусловием (while)**:
   - Условие проверяется перед выполнением цикла.
   - Пример:
     ```dart
     int i = 1;
     while (i <= 5) {
       print("Сообщение \$i");
       i++;
     }
     ```
   - Если условие ложно с самого начала, цикл не выполнится ни разу.

2. **Цикл с постусловием (do-while)**:
   - Выполняется хотя бы один раз, даже если условие ложно.
   - Пример:
     ```dart
     int i = 1;
     do {
       print("Сообщение \$i");
       i++;
     } while (i <= 5);
     ```

3. **Цикл с параметром (for)**:
   - Используется, когда известно количество повторений.
   - Пример:
     ```dart
     for (int i = 1; i <= 5; i++) {
       print("Сообщение \$i");
     }
     ```

### Пример:
Допустим, вам нужно посчитать сумму всех чётных чисел от 1 до 10:
```dart
void main() {
  int sum = 0;
  for (int i = 1; i <= 10; i++) {
    if (i % 2 == 0) { // Проверяем, чётное ли число
      sum += i;
    }
  }
  print("Сумма чётных чисел: \$sum"); // Вывод: 30 (2 + 4 + 6 + 8 + 10)
}
```

### Полезные конструкции:
- **break**: Прерывает цикл:
  ```dart
  for (int i = 1; i <= 10; i++) {
    if (i == 5) break;
    print(i);
  }
  ```
  Выведет числа от 1 до 4.

- **continue**: Пропускает текущую итерацию:
  ```dart
  for (int i = 1; i <= 5; i++) {
    if (i == 3) continue;
    print(i);
  }
  ```
  Пропустит число 3.

### Полезные советы:
- Всегда проверяйте условие выхода, чтобы избежать бесконечных циклов.
- Для больших данных оптимизируйте циклы, минимизируя количество операций внутри.
- Используйте `for`, если количество итераций известно, и `while`, если оно зависит от условия.
''',
          quiz: [
            QuizQuestion(
              question: 'Для чего нужны циклические алгоритмы?',
              options: [
                'Для повторения действий',
                'Для разветвления',
                'Для хранения данных'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Какой оператор НЕ является циклическим?',
              options: ['if', 'for', 'while'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что такое итерация?',
              options: [
                'Одно выполнение цикла',
                'Тип данных',
                'Условный оператор'
              ],
              correctAnswerIndex: 0,
            ),
          ],
        ),
        Lesson(
          title: '5. Рекурсивные алгоритмы',
          content: '''
Рекурсивные алгоритмы — это алгоритмы, в которых функция вызывает сама себя для решения задачи. Рекурсия часто используется для задач, которые можно разбить на более мелкие подзадачи.

### Что такое рекурсия?
Рекурсия — это процесс, когда функция вызывает себя с изменёнными параметрами. Каждая рекурсивная функция должна иметь:
- **Базовый случай**: Условие, при котором рекурсия прекращается.
- **Рекурсивный шаг**: Вызов функции с меньшей задачей.

### Пример: Факториал
Факториал числа `n` определяется как `n! = n * (n-1)!`, а `0! = 1`. Реализуем это рекурсивно:
```dart
int factorial(int n) {
  if (n == 0) { // Базовый случай
    return 1;
  }
  return n * factorial(n - 1); // Рекурсивный шаг
}

void main() {
  print(factorial(5)); // Вывод: 120 (5 * 4 * 3 * 2 * 1)
}
```
- `factorial(5)` вызывает `factorial(4)`, затем `factorial(3)`, и так далее, пока не дойдёт до `factorial(0)`.

### Пример: Числа Фибоначчи
Числа Фибоначчи: каждое число — сумма двух предыдущих (`0, 1, 1, 2, 3, 5, 8, ...`).
```dart
int fibonacci(int n) {
  if (n <= 1) { // Базовый случай
    return n;
  }
  return fibonacci(n - 1) + fibonacci(n - 2); // Рекурсивный шаг
}

void main() {
  print(fibonacci(6)); // Вывод: 8
}
```

### Когда использовать рекурсию?
- Для задач с естественным разбиением: например, обход дерева, вычисление факториала.
- Для задач с вложенной структурой: например, работа с папками и файлами.

### Плюсы и минусы:
- **Плюсы**:
  - Код часто короче и элегантнее, чем с циклами.
  - Хорошо подходит для математических задач.
- **Минусы**:
  - Может быть медленнее, чем цикл, из-за накладных расходов на вызовы функций.
  - Может вызвать переполнение стека при большом количестве рекурсий (например, `fibonacci(100)`).

### Полезные советы:
- Всегда определяйте базовый случай, чтобы избежать бесконечной рекурсии.
- Для оптимизации используйте **хвостовую рекурсию** или заменяйте рекурсию на цикл, если это возможно.
- Для задач с большим числом рекурсий (например, Фибоначчи) используйте динамическое программирование, чтобы избежать повторных вычислений.
''',
          quiz: [
            QuizQuestion(
              question: 'Что такое рекурсия?',
              options: [
                'Когда функция вызывает сама себя',
                'Тип цикла',
                'Способ хранения данных'
              ],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что вычисляет функция: return n * f(n-1)?',
              options: ['Факториал', 'Сумму', 'Степень'],
              correctAnswerIndex: 0,
            ),
            QuizQuestion(
              question: 'Что обязательно должно быть в рекурсивной функции?',
              options: [
                'Условие выхода',
                'Цикл',
                'Несколько параметров'
              ],
              correctAnswerIndex: 0,
            ),
          ],
        ),
      ],
    ),
  ];

  @override
  Widget build(BuildContext context) {
    final gameState = Provider.of<GameState>(context);
    return Scaffold(
      appBar: AppBar(
        title: Text('Образовательный блок'),
        backgroundColor: Color(0xFF6200EA),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF6200EA), Color(0xFFFF6200)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Padding(
          padding: EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Учебные материалы',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              SizedBox(height: 16),
              Expanded(
                child: ListView.builder(
                  itemCount: educationItems.length,
                  itemBuilder: (context, index) {
                    final item = educationItems[index];
                    return Card(
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: ListTile(
                        leading: Icon(item.icon, color: item.color, size: 30),
                        title: Text(
                          item.title,
                          style: TextStyle(fontWeight: FontWeight.bold),
                        ),
                        subtitle: Text(item.description),
                        trailing: Icon(Icons.arrow_forward_ios, color: Colors.grey),
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => LessonDetailScreen(educationItem: item),
                            ),
                          );
                        },
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}